import Foundation

/// Defines a security scheme that can be used by the operations.
///
/// Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and OpenID Connect Discovery. Please note that as of 2020, the implicit flow is about to be deprecated by OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant flow with PKCE.
public struct SecuritySchemeObject: Codable, Equatable, SpecificationExtendable {
    
    /// The type of the security scheme.
    public var type: SecuritySchemeObjectType
    
    /// A description for security scheme. CommonMark syntax MAY be used for rich text representation.
    public var description: String?
    
    /// The name of the header, query or cookie parameter to be used.
    public var name: String
    
    ///  The location of the API key
    public var `in`: In
    
    /// The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
    public var scheme: String
    
    /// A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
    public var bearerFormat: String?
    
    /// An object containing configuration information for the flow types supported.
    public var flows: OAuthFlowsObject
    
    /// OpenId Connect URL to discover OAuth2 configuration values. The OpenID Connect standard requires the use of TLS.
    public var openIdConnectUrl: URL
    
    public init(type: SecuritySchemeObjectType, description: String? = nil, name: String, `in`: SecuritySchemeObject.In, scheme: String, bearerFormat: String? = nil, flows: OAuthFlowsObject, openIdConnectUrl: URL) {
        self.type = type
        self.description = description
        self.name = name
        self.`in` = `in`
        self.scheme = scheme
        self.bearerFormat = bearerFormat
        self.flows = flows
        self.openIdConnectUrl = openIdConnectUrl
    }
}

extension SecuritySchemeObject {
    
    public enum In: String, Codable {
        
        case query, header, cookie
    }
}

public enum SecuritySchemeObjectType: String, Codable {
    
    case apiKey, http, mutualTLS, oauth2, openIdConnect
}
